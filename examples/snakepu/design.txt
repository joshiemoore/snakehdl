snakePU (Snake Processing Unit) Rough Initial Design Doc
Coming Soon(TM) To A Datacenter Near You


The basic idea is to implement a Python bytecode interpreter in hardware ("snakePU") to
  serve as a mega-fast Python coprocessor chip.

More specifically, we create a stack-based RISC microarchitecture ("microsnake") so
  that we can implement the complex behaviors specified by each Python opcode as a series
  of elementary microinstructions across multiple clock cycles.


snakePU MAIN REGISTERS:
  -- control
     PC - Program counter (word)
          bits 2 -> n index words within Firmware ROM
          low two bits index individual bytecode instructions (opcode + arg) with muxes for loading into IR and ARG
     IR - Instruction register (byte)

  -- data
     ARG - Argument register - second byte of opcode (4 byte)

INSTRUCTION PHASES:
  1. Fetch opcode -> IR, ARG
  2. Decode opcode -> load ROM address of microroutine (opcode << 4) into MPC
  3. Execute microroutine starting at [MPC]


== MICROCODE ("microsnake") ==

The Python opcode is just an index into a list of microroutines stored in Microcode ROM (16 * 256 instruction entries)
  (microroutines can be at most 16 instructions long, and there are 256 Python opcodes max (cuz it's BYTEcode))

These microroutines enable us to implement the complex behavior specified by the Python opcode across multiple clock cycles

Each microinstruction is 4 bytes, and each bit directly represents a signal that controls various parts of the processor
  (i.e store destinations, ALU ops, etc)

A key benefit of this approach is that we don't need to change the hardware as the opcode values change between
  Python versions. We can just update the layout of the microroutine list in ROM to put each microroutine at the
  correct index, and this can happen automatically when we're flashing the chip.

constants (including Python bytecode) are stored separately in Firmware ROM


MICROSNAKE REGISTERS:
  -- control
     MPC - Microprogram counter (14bit) (index into microcode ROM)
           First 256 microroutines implement internal processor functionality (init, etc.)
           Second 256 microroutines implement the functionality of Python opcodes

  -- data
     SP - Stack pointer (word)
     FP - Frame pointer (word)
     ADDR - address register (word) for arbitrary RAM reads/writes
     TMP[0-3] - temporary registers (word)
     CMP - stores comparison results


*** microsnake instruction set ***

src can be a register or an immediate value

-- register operations
MOV dst, src

-- stack operations (stack starts at memory address 0)
PUSH src
POKE src
POP dst
PEEK dst

-- control operations
RET - exit microroutine (uopcode 0x0000)
JMP <loc>
JZ <loc>
JNZ <loc>

-- comparison operations (result stored in CMP register)
EQ a, b
GT a, b      (a > b)
LT a, b      (a < b)
GEQ a, b     (a >= b)
LEQ a, b     (a <= b)

-- arithmetic operations
ADD dst, src
SUB dst, src      (dst-src)
MUL dst, src
DIV dst, src      (dst / src)
[TODO...]

-- logical operations
NOT dst
AND dst, src
XOR dst, src
OR dst, src
SHL dst, src (shift left - where b is the number of bits to shift)
SHR dst, src (shift right - same as above)
[TODO...]


DST/A/B operand values
 0 - 0
 1 - IMM
 2 - IR
 3 - SP
 4 - PEEK/POKE    (stack top)
 5 - FP
 6 - ARG
 7 - PC
 8 - ADDR
 9 - RAM[ADDR]
10 - ROM[ADDR]
11 - TMP0
12 - TMP1
13 - TMP2
14 - TMP3

CMP op values
 0 - no comparison
 1 - EQ
 2 - GT
 3 - LT
 4 - GEQ
 5 - LEQ

JMP op values
 0 - no jump
 1 - JMP
 2 - JZ
 3 - JNZ

CONTROL SIGNALS (microinstruction layout, LSB to MSB):
  5 - ALU_OP (decoded into ALU control inputs)
  4 - JMP OP
  3 - CMP OP
  1 - INC_SP
  1 - DEC_SP

  4 - DST
  4 - SRC

  10 - immediate value

MICROCODE ROM LAYOUT (4-byte addressed):
  uinst[16 * 256] snake_microroutines: microroutines for internal processor functions that
                                       don't correspond to python bytecode ops (init, etc.)
  uinst[16 * 256] py_microroutines: microroutine table for implementing python bytecode

FIRMWARE ROM LAYOUT (word-addressed):
  word* entry: pointer to the first instruction in the program
  word nglobals: total number of globals
  word nconsts: total number of constants
  word*[nconsts]: constant table (pointers to constant values)
  word[] constants: word-aligned constant data

OBJECT STRUCTURE:
  word type: constant type
  word n: nlocals for code objects, length for non-primitives like list and dict
  word(*) val: object's value for primitive types (int, float, bool)
            heap pointer for non-primitive objects
            Firmware ROM pointer for consts (including code objects)

FRAME STRUCTURE:
  word* return_address
  word* prev_fp
  word nlocals
  object[nlocals] locals: list of local objects


For the root frame, "locals" is actually globals
So any non-root frame that references globals will be referencing the root frame's locals

Object structures are stored directly in the frame on the stack,
  but I think we will need a MAU (Memory Allocation Unit) to allocate heap memory for objects of non-primitive type


EXCEPTIONS: TODO
